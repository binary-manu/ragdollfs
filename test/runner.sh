#!/usr/bin/env bash

set -eo pipefail

declare -r TESTLIST=testlist.yaml
declare -r TESTDIR="$(mktemp -d -q -p /tmp)"
declare -r MNT="$TESTDIR/mnt"
declare -r RAGDOLLFS="../src/ragdollfs"
declare -r CATFILE="$MNT/single.cat"

trap '
    umount "$MNT" &> /dev/null || true
    rm -rf "$TESTDIR" &> /dev/null || true
' EXIT TERM QUIT INT

get_value() {
    jq -r -c "$1" <<<"$__TEST__"
}

get_multiline_value() {
    jq -r "$1 | .[]" <<<"$__TEST__"
}

setup() {
    # Create a mount point, segment files and mount them
    mkdir -p "$MNT"

    segIndex=0
    segString=""
    while read -r seg; do
        segName="$(printf "%s/%03d" "$TESTDIR" "$segIndex").seg"
        printf "%s" "$seg" > "$segName"
        if [ "$segIndex" -eq 0 ]; then
            segString="$segName"
        else
            segString="$segString:$segName"
        fi
        segIndex=$((segIndex + 1))
    done < <(get_multiline_value .setup.segments)

    "$RAGDOLLFS" --overlap="$(get_value .setup.overlap)" \
        --skip="$(get_value .setup.skip)" \
        --segments="$segString" "$MNT"
}

teardown() {
    umount "$MNT"
    rm -rf "$TESTDIR"
}

oracle() {
    skip=$(get_value .setup.skip)
    for seg in "$TESTDIR/"*.seg; do
        dd skip="$skip" if="$seg" iflag=skip_bytes status=none 2>/dev/null
        skip="$(get_value .setup.overlap)"
    done
}

md5() {
    md5sum -b | cut -b 1-32
}

read_range() {
    dd skip="$1" bs="$2" count=1 \
       iflag=skip_bytes,fullblock status=none 2>/dev/null
}

random() {
    echo "0x$(openssl rand -hex 4)"
}

run() {
    FILEDGST="$(md5 < "$CATFILE")"
    ORACLE="$(oracle | md5)"
    if [ "$FILEDGST" != "$ORACLE" ]; then
        echo "❌ Test failed"
        return 1
    fi

    # Read a number of randomly generated byte ranges to test random access
    NRANGES="$(shuf -i 1-10 | tail -n 1)"
    FILSZ="$(stat -c %s "$CATFILE")"
    if [ "$FILSZ" -eq 0 ]; then
        echo "✅ Test passed"
        return 0
    fi

    while [ "$NRANGES" -gt 0 ]; do
        NRANGES=$((NRANGES - 1))
        START="$(( "$(random)" % "$FILSZ"))"
        LEN="$(( "$(random)" % "$FILSZ" + 1))"

        FILEDGST="$(read_range "$START" "$LEN" < "$CATFILE" | md5)"
        ORACLE="$(oracle | read_range "$START" "$LEN" | md5)"
        if [ "$FILEDGST" != "$ORACLE" ]; then
            echo "❌ Test failed"
            return 1
        fi
    done
    
    # Truncate one segment and re-read everything: this must fail
    truncate -s -1 $(shuf -e "$TESTDIR"/*.seg)
    if md5 &> /dev/null < "$CATFILE"; then
        echo "❌ Test failed"
        return 1
    fi

    echo "✅ Test passed"
}

yaml2json < "$TESTLIST" | jq -c '.[]' | while read -r __TEST__; do
    echo "» Running test $(get_value .description)"
    setup
    run
    teardown
done